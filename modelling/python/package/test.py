#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr  2 18:08:02 2020

@author: jeff
"""

import numpy as np


Plant = True
opt_ts = False
opt_pc = False
opt_rh = False

# File for testing methods in the 'simulation' class that is too complicated
# to initialise at this stage.


ts_optstrs = ['float: c_ts;', 'var ', ' - c_ts * Q_ts_max', 
                    ' ++ [";"] ++  [show(Q_ts_max)]']
if not opt_ts: ts_optstrs = [''] * len(ts_optstrs)
    

rh_optstrs = ['float: c_rh;', 'var ', ' - c_rh * P_ts_in_max', 
                    ' ++ [";"] ++ [show(P_ts_in_max)]']
if not opt_rh: rh_optstrs = [''] * len(rh_optstrs)

pc_optstrs = ['float: c_pc;', 'var ', ' - c_pc * P_pc_out_max', 
                  ' ++ [";"] ++ [show(P_pc_out_max)]']
if not opt_pc: pc_optstrs = [''] * len(pc_optstrs)



plant_strs = ['float: eta_inv;',
              'float: P_inv_in_max;  %%maximum power to the inverter (MW-e)]',
              'array[tint] of float: P_in_plant;  %%DC electricity generated by the PV plant',
              'array[tint] of var float: P_out_pass;  %%power lost due to full tank',
              'array[tint] of var float: P_inv_in;     %%power into the inverter (MW-e)',
              'constraint forall(i in tint)(P_out_pass[i] >= 0);',
              'constraint forall(i in tint)(P_inv_in[i] >= 0);',
              'constraint forall(i in tint)(P_inv_in[i] <= P_inv_in_max);',
              'P_out_pass[i] + P_inv_in[i] - P_in_plant[i] + ',
              ' + P_inv_in[i] * eta_inv',
              ' ++ [";"] ++ [show(P_out_pass)] ++ [";"] ++ [show(P_inv_in)]']

if not Plant: plant_strs = [''] * len(plant_strs)

mzn_string = """
int: N;

set of int: tsamp = 1..N+1;    %%number of sample points
set of int: tint = 1..N;       %%number of intervals

float: dt;                %%time difference between sample points (also, interval length) (h)
float: eta_rh;            %%efficiency of resistance heater in tank
float: eta_pc;            %%efficiency of heat to electricity (power cycle efficiency)
%s
%s
%s
%s
%s
%sfloat: Q_ts_max;          %%maximum stored energy (MWh-th)
%sfloat: P_ts_in_max;       %%maximum power to storage (MW-e)
%sfloat: P_pc_out_max;

var float: Q_ts_min;          %%minimum stored energy (MWh-th)
var float: Q_ts_init;         %%initial stored energy (MWh-th)

array[tint] of float: c;                 %%energy spot price
%s

%%flows into and out of the system (plus P_in_panels)

array[tint] of var float: P_in_grid;    %%power purchased from the electricity grid (MW-e)
array[tint] of var float: P_out_grid;   %%total power generated (MW-e)     
%s

%%flows within the system
array[tint] of var float: P_ts_in;      %%power into the thermal energy storage (MW-e)
array[tint] of var float: P_pc_out;     %%power out of the thermal energy storage tank (MW-e)
%s
array[tsamp] of var float: Q;        %%Energy in storage (MWh-th)

var float: obj;

obj = sum(i in tint)(c[i] * (P_out_grid[i] - P_in_grid[i]))%s%s%s;       

%%=== CONSTRAINTS ===
constraint Q[1] = Q_ts_init;

%%"minimum" constraints
constraint forall(i in tint)(P_in_grid[i] >= 0);
constraint forall(i in tint)(P_out_grid[i] >= 0);
%s
constraint forall(i in tint)(P_ts_in[i] >= 0);
constraint forall(i in tint)(P_pc_out[i] >= 0);
%s
constraint forall(i in tsamp)(Q[i] >= Q_ts_min);
constraint P_ts_in_max > 0;
constraint P_pc_out_max > 0;
constraint Q_ts_max > 0;

%%"maximum" constraints
constraint forall(i in tint)(P_ts_in[i] <= P_ts_in_max);
constraint forall(i in tint)(P_pc_out[i] <= P_pc_out_max);
%s
constraint forall(i in tsamp)(Q[i] <= Q_ts_max);
constraint P_ts_in_max < 1e5;
constraint P_pc_out_max < 1e5;
constraint Q_ts_max < 1e5;

%%energy balances
constraint forall(i in tint)(P_in_grid[i] = %sP_ts_in[i]);
constraint forall(i in tint)(P_out_grid[i] = P_pc_out[i]%s);
constraint forall(i in tint)(Q[i+1] = Q[i] + (P_ts_in[i] * eta_rh - P_pc_out[i] / eta_pc) * dt);    

solve maximize obj;

output [show(P_in_grid)]%s ++ [";"] ++ [show(P_out_grid)] ++ [";"] ++ [show(Q)]%s%s%s;
"""%(plant_strs[0], ts_optstrs[0], rh_optstrs[0], pc_optstrs[0], plant_strs[1], ts_optstrs[1],
 rh_optstrs[1], pc_optstrs[1], plant_strs[2], plant_strs[3], plant_strs[4],
 ts_optstrs[2], rh_optstrs[2], pc_optstrs[2], plant_strs[5], plant_strs[6],
 plant_strs[7], plant_strs[8], plant_strs[9], plant_strs[10], ts_optstrs[3], 
 rh_optstrs[3], pc_optstrs[3])

with open('/home/jeff/cloud/documents/work/ANU/Thermal Battery Research/temp/test.mzn', 'w') as text_file:
    text_file.write(mzn_string)


N = 48
dt = 0.5
eta_rh = 1.
eta_pc = 0.4
Q_init_frac = 0.0

c = [88.0, 91.86, 88.83, 73.62, 71.49, 69.27, 68.44, 69.67, 67.58, 
     67.09, 67.53, 65.8, 61.53, 66.62, 68.42, 69.02, 69.0, 68.88, 
     69.22, 74.04, 75.15, 75.2, 80.66, 77.93, 71.48, 70.47, 76.55, 
     83.84, 85.14, 84.88, 82.54, 87.06, 95.05, 90.84, 91.46, 81.83, 
     79.93, 72.77, 74.45, 71.73, 76.95, 78.91, 69.42, 71.31, 66.1, 
     65.72, 62.37, 62.84]

P_in_plant = [0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,27.694,27.694,
 24.482,24.482,63.546,63.546,72.818,72.818,75.273,75.273,75.843,75.843,
 75.491,75.491,72.161,72.161,70.291,70.291,24.545,24.545,8.045,8.045,1.639,
 1.639,0.730,0.730,0.121,0.121,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
 0.000,0.000,0.000]

eta_inv = 0.96
P_inv_in_max = 57.29
Q_ts_max = 500. 
c_ts = 3776. / 365
P_ts_in_max = 50.
c_rh = 2102. / 365
P_pc_out_max = 50. 
c_pc = 125891. / 365

if Plant: 
    P_in_plant_str = 'P_in_plant = ' + np.array2string(np.array(P_in_plant), 
                            threshold = len(P_in_plant) + 1,
                            separator = ',', 
                            formatter = {'float_kind' : lambda x: "%.3f" %x})
    eta_inv_str = 'eta_inv = %.2f;' %eta_inv
    P_inv_in_max_str = 'P_inv_in_max = %.2f;' %P_inv_in_max
else: 
    P_in_plant_str = ''
    eta_inv_str = ''
    P_inv_in_max_str = ''

        
if not opt_ts: 
    Q_ts_max_str = "Q_ts_max = %.8f;" %Q_ts_max
    c_ts_str = ''
else: 
    Q_ts_max_str = ''
    c_ts_str = 'c_ts = %.2f;' %c_ts

if not opt_rh: 
    P_ts_in_max_str = "P_ts_in_max = %.8f;" %P_ts_in_max
    c_rh_str = ''
else: 
    P_ts_in_max_str = ''
    c_rh_str = 'c_rh = %.2f;' %c_rh

if not opt_pc: 
    P_pc_out_max_str = "P_pc_out_max = %.8f;" %P_pc_out_max
    c_pc_str = ''
else: 
    P_pc_out_max_str = ''
    c_pc_str = 'c_pc = %.2f;' %c_pc


   
dzn_string = """
N = %i;

dt = %.2f;      %%time difference between sample points (also, interval length) (h)

eta_rh = %.2f;                      %%efficiency of electricity to heat
eta_pc = %.2f;                     %%efficiency of heat to electricity
%s

%s
Q_ts_min = 0;
Q_ts_init = %.2f * Q_ts_max;              %%initial stored energy (MWh-th)

%s
%s
%s               
                         
%s
%s
%s

c = %s;                              %%Electricity spot price

%s                                  %%DC flow from the PV plant

    """ %(N, dt, eta_rh, eta_pc, eta_inv_str, Q_ts_max_str, 
        Q_init_frac, P_ts_in_max_str, P_pc_out_max_str, P_inv_in_max_str, 
        c_pc_str, c_ts_str, c_rh_str, str(c), P_in_plant_str)
    
print(dzn_string)

with open('/home/jeff/cloud/documents/work/ANU/Thermal Battery Research/temp/test.dzn', 'w') as text_file:
    text_file.write(dzn_string)